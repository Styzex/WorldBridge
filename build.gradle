import org.codehaus.groovy.runtime.GStringImpl

/** The root of the build. Exposed for flexibility, but you shouldn't edit it
    unless you have to. Edit project.gradle instead. */

buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "https://maven.minecraftforge.net/"
        }
        maven {
            url = "https://jitpack.io"
        }
    }
    dependencies {
        classpath('com.github.GTNewHorizons:ForgeGradle:1.2.11') {
            // This transitive dependency breaks plugins for some reason. Only GTNH-FG has this issue.
            exclude group: "org.eclipse.equinox"
        }
    }
}

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '4.0.4'
}

if(project.enable_lombok.toBoolean()) {
    dependencies {
        compileOnly 'org.projectlombok:lombok:1.18.4'
        compile 'org.bitlet:weupnp:0.1.4'
    }
}

shadowJar {
    classifier = ''
}

task buildShadowJar {
    group = 'build' // This groups the task under the build category
    description = 'Builds the fat JAR using shadowJar'

    // This task depends on the shadowJar task
    dependsOn shadowJar

    doLast {
        println 'Shadow JAR has been built successfully!'
    }
}

apply from: "buildscript/forge-1.7.gradle"

//##########################################################################################################
//########################################    Mixin  Part   ################################################
//##########################################################################################################
/**
 * The name of your mixin config. Should match the name of mixin config file, which you placed in src/main/resources/
 */
def yourMixinConfig = 'worldbridge.mixin.json'
/**
 * The file with this name will be generated during build. Should math the remap value inside your src/main/resources/*yourMixinConfig*
 */
def refMapForYourConfig = 'worldbridge.mixin.refmap.json'
/**
 * Relative path to the new annotation processor.
 * You should download it (https://github.com/TimeConqueror/SpongeMixins/raw/master/mixin-0.8-SNAPSHOT.jar) and then place to the project folder.
 * You may also place it in the inner folders, only thing you should to do is to provide right RELATIVE path.
 */
def relativePathToMixinAP = 'mixin-0.8-SNAPSHOT.jar'

repositories {
    maven {
        name = 'sponge'
        url = 'https://repo.spongepowered.org/repository/maven-public'
    }
}

dependencies {
    compile('org.spongepowered:mixin:0.7.11-SNAPSHOT') {
        // Mixin includes a lot of dependencies that are too up-to-date
        exclude module: 'launchwrapper'
        exclude module: 'guava'
        exclude module: 'gson'
        exclude module: 'commons-io'
        exclude module: 'log4j-core'
    }
}

def refMap = "${tasks.compileJava.temporaryDir}" + File.separator + refMapForYourConfig

def mixinSrg = "${tasks.reobf.temporaryDir}" + File.separator + "mixins.srg"

jar {
    from refMap
    manifest {
        attributes([
                "TweakClass": "org.spongepowered.asm.launch.MixinTweaker",
                'MixinConfigs': yourMixinConfig,
                'FMLCorePluginContainsFMLMod': 'true',
                "ForceLoadAsMod": true
        ])
    }
}

reobf {
    addExtraSrgFile mixinSrg
}

afterEvaluate {
    def fixedRelPathToAP = relativePathToMixinAP
    if(fixedRelPathToAP.startsWith('./') || fixedRelPathToAP.startsWith('.\\')){
        fixedRelPathToAP = fixedRelPathToAP.substring(2)
    } else if(fixedRelPathToAP.startsWith('/') || fixedRelPathToAP.startsWith('\\')){
        fixedRelPathToAP = fixedRelPathToAP.substring(1)
    }

    tasks.compileJava {
        println "Path: " + projectDir.absolutePath
        options.compilerArgs += [
                // There's a bug in the AnnotationProcessor for 0.7.11 that will generate the annotations pointing to the parent class instead of subclass
                // resulting in the mixin not being applied.  This is fixed in 0.8, however 0.8 needs guava > 21.0, and minecraft ships with 17.0.
                // So as a hacky workaround... ship with 0.7.11, but use the AP from 0.8 for compiling
                "-processorpath", projectDir.absolutePath + '/' + fixedRelPathToAP,
                "-processor", "org.spongepowered.tools.obfuscation.MixinObfuscationProcessorInjection,org.spongepowered.tools.obfuscation.MixinObfuscationProcessorTargets",
                "-Xlint:-sunapi", "-XDenableSunApiLintControl", "-XDignore.symbol.file",
                "-AreobfSrgFile=${tasks.reobf.srg}", "-AoutSrgFile=${mixinSrg}", "-AoutRefMapFile=${refMap}"
        ]
    }
}

sourceSets {
    main {
        output.resourcesDir = output.classesDir
        ext.refMap = refMapForYourConfig
    }
}